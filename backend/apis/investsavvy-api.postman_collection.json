{
	"info": {
		"_postman_id": "baa6abb6-4b45-4086-a74e-91c9cff4858d",
		"name": "InvestSavvy-API",
		"description": "API for managing survey data, users, ticker information, and watchlists",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "33397024",
		"_collection_link": "https://planetary-flare-105364.postman.co/workspace/COM-FT-DEV2_MAR2024_T03~54dab690-dc39-45d0-8cc3-9a2568759a3a/collection/33397024-baa6abb6-4b45-4086-a74e-91c9cff4858d?action=share&source=collection_link&creator=33397024"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "register",
					"item": [
						{
							"name": "Register a new user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\": \"<string>\",\n\t\"last_name\": \"<string>\",\n\t\"email\": \"<string>\",\n\t\"password_hash\": \"<string>\",\n\t\"user_type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/user/register",
								"description": "Registers a new user."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"<string>\",\n\t\"last_name\": \"<string>\",\n\t\"email\": \"<string>\",\n\t\"password_hash\": \"<string>\",\n\t\"user_type\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/user/register"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Login a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(user) {",
											"        pm.expect(user.email).to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function(user){",
											"    pm.expect(user.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");",
											"  });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{login_email}}\",\n\t\"password_hash\": \"{{login_password_hash}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/user/login",
								"description": "Logs in a user by validating email and password."
							},
							"response": [
								{
									"name": "Successful login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"<email>\",\n\t\"password_hash\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/user/login"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": null
								},
								{
									"name": "Login failure",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"<email>\",\n\t\"password_hash\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/user/login"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "all",
					"item": [
						{
							"name": "Get a list of users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  responseData.forEach(function(user) {",
											"    pm.expect(user.email).to.be.a('string').and.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Verify that risk_profile_id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(user) {",
											"        pm.expect(user.risk_profile_id).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/user/all",
								"description": "Returns a list of all users."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/user/all"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n\t{\n\t\t\"first_name\": \"<string>\",\n\t\t\"last_name\": \"<string>\",\n\t\t\"email\": \"<string>\",\n\t\t\"password_hash\": \"<string>\",\n\t\t\"user_type\": \"<string>\",\n\t\t\"id\": \"<integer>\"\n\t},\n\t{\n\t\t\"first_name\": \"<string>\",\n\t\t\"last_name\": \"<string>\",\n\t\t\"email\": \"<string>\",\n\t\t\"password_hash\": \"<string>\",\n\t\t\"user_type\": \"<string>\",\n\t\t\"id\": \"<integer>\"\n\t}\n]"
								}
							]
						}
					]
				},
				{
					"name": "by_uid",
					"item": [
						{
							"name": "Get user info by user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(user) {",
											"        pm.expect(user.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function(user) {",
											"    pm.expect(user.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Password hash should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function(user) {",
											"      pm.expect(user.password_hash).to.exist.and.to.not.be.empty;",
											"  });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/by_uid?id={{user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"by_uid"
									],
									"query": [
										{
											"key": "id",
											"value": "{{user_id}}",
											"description": "(Required) ID of the user to retrieve"
										}
									]
								},
								"description": "Returns user information based on user_id."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/by_uid?id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"by_uid"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) ID of the user to retrieve"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"first_name\": \"<string>\",\n\t\"last_name\": \"<string>\",\n\t\"email\": \"<string>\",\n\t\"password_hash\": \"<string>\",\n\t\"user_type\": \"<string>\",\n\t\"id\": \"<integer>\"\n}"
								}
							]
						},
						{
							"name": "Modify the user password hash",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password_hash\": \"{{password_hash}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/by_uid?id=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"by_uid"
									],
									"query": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) ID of the user to update password hash"
										}
									]
								},
								"description": "Modifies the user password hash based on user_id."
							},
							"response": [
								{
									"name": "Password updated",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"password_hash\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/by_uid?id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"by_uid"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) ID of the user to update password hash"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "riskprofile",
					"item": [
						{
							"name": "Get user risk profile by user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Each element in the response array has a valid risk_profile_id\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(element) {",
											"        pm.expect(element.risk_profile_id).to.be.a('number');",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/riskprofile?id={{user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"riskprofile"
									],
									"query": [
										{
											"key": "id",
											"value": "{{user_id}}",
											"description": "(Required) ID of the user to retrieve risk profile"
										}
									]
								},
								"description": "Returns user risk profile based on user_id."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/riskprofile?id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"riskprofile"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) ID of the user to retrieve risk profile"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"risk_profile_id\": \"<integer>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "survey",
			"item": [
				{
					"name": "add",
					"item": [
						{
							"name": "Record a survey answer for a specific user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user_id\": \"<integer>\",\n\t\"age\": \"<integer>\",\n\t\"occupation\": \"<string>\",\n\t\"income\": \"<string>\",\n\t\"risk_tolerance\": \"<string>\",\n\t\"investment_experience\": \"<string>\",\n\t\"time_horizon\": \"<string>\",\n\t\"investment_goal\": \"<string>\",\n\t\"investment_knowledge\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/survey/add",
								"description": "Records a survey answer for a specific user."
							},
							"response": [
								{
									"name": "Survey results added",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"user_id\": \"<integer>\",\n\t\"age\": \"<integer>\",\n\t\"occupation\": \"<string>\",\n\t\"income\": \"<string>\",\n\t\"risk_tolerance\": \"<string>\",\n\t\"investment_experience\": \"<string>\",\n\t\"time_horizon\": \"<string>\",\n\t\"investment_goal\": \"<string>\",\n\t\"investment_knowledge\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/survey/add"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "all",
					"item": [
						{
							"name": "Get survey answers of all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(survey) {",
											"        pm.expect(survey).to.include.all.keys(",
											"            'user_id', 'age', 'occupation', 'income', 'risk_tolerance', ",
											"            'investment_experience', 'time_horizon', 'investment_goal', 'investment_knowledge'",
											"        );",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Age is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  responseData.forEach(function(survey) {",
											"    pm.expect(survey.age).to.be.a('number');",
											"    pm.expect(survey.age).to.be.at.least(0, \"Age should be a non-negative integer\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Occupation is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.occupation).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Occupation should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Investment knowledge is one of the predefined values\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.investment_knowledge).to.be.oneOf([\"novice\", \"intermediate\", \"advanced\"]);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/survey/all",
								"description": "Returns survey answers of all users."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/survey/all"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n\t{\n\t\t\"user_id\": \"<integer>\",\n\t\t\"age\": \"<integer>\",\n\t\t\"occupation\": \"<string>\",\n\t\t\"income\": \"<string>\",\n\t\t\"risk_tolerance\": \"<string>\",\n\t\t\"investment_experience\": \"<string>\",\n\t\t\"time_horizon\": \"<string>\",\n\t\t\"investment_goal\": \"<string>\",\n\t\t\"investment_knowledge\": \"<string>\"\n\t},\n\t{\n\t\t\"user_id\": \"<integer>\",\n\t\t\"age\": \"<integer>\",\n\t\t\"occupation\": \"<string>\",\n\t\t\"income\": \"<string>\",\n\t\t\"risk_tolerance\": \"<string>\",\n\t\t\"investment_experience\": \"<string>\",\n\t\t\"time_horizon\": \"<string>\",\n\t\t\"investment_goal\": \"<string>\",\n\t\t\"investment_knowledge\": \"<string>\"\n\t}\n]"
								}
							]
						}
					]
				},
				{
					"name": "by_user",
					"item": [
						{
							"name": "Get survey answer of a specific user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/survey/by_user?user_id={{user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"survey",
										"by_user"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "(Required) ID of the user to retrieve survey answer"
										}
									]
								},
								"description": "Returns survey answer of a specific user."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/survey/by_user?user_id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"survey",
												"by_user"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>",
													"description": "(Required) ID of the user to retrieve survey answer"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"user_id\": \"<integer>\",\n\t\"age\": \"<integer>\",\n\t\"occupation\": \"<string>\",\n\t\"income\": \"<string>\",\n\t\"risk_tolerance\": \"<string>\",\n\t\"investment_experience\": \"<string>\",\n\t\"time_horizon\": \"<string>\",\n\t\"investment_goal\": \"<string>\",\n\t\"investment_knowledge\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "ticker",
			"item": [
				{
					"name": "all",
					"item": [
						{
							"name": "Get a list of all tickers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the risk_profile_id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function(item) {",
											"    pm.expect(item.risk_profile_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Risk profile ID should be a non-negative integer\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Type field is a valid type\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.type).to.be.oneOf(['Stock', 'Bond', 'ETF', 'REIT']);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/ticker/all",
								"description": "Returns a list of all tickers."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/ticker/all"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t},\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t}\n]"
								}
							]
						}
					]
				},
				{
					"name": "by_riskprofile",
					"item": [
						{
							"name": "Get a list of tickers by risk profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Symbol is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.symbol).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Symbol should be a non-empty string\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  responseData.forEach(function(item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Risk_profile_id is a positive integer\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  responseData.forEach(function(item) {",
											"    pm.expect(item.risk_profile_id).to.be.a('number').above(0);",
											"  });",
											"});",
											"",
											"pm.test(\"Each item's risk_profile_id corresponds to the one sent in the request query\", function () {",
											"    const riskProfileId = pm.request.url.query.toObject().rpid;",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.risk_profile_id.toString()).to.equal(riskProfileId);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticker/by_riskprofile?rpid={{riskprofile_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticker",
										"by_riskprofile"
									],
									"query": [
										{
											"key": "rpid",
											"value": "{{riskprofile_id}}",
											"description": "(Required) ID of the risk profile to retrieve tickers"
										}
									]
								},
								"description": "Returns a list of tickers based on risk profile."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ticker/by_riskprofile?rpid=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ticker",
												"by_riskprofile"
											],
											"query": [
												{
													"key": "rpid",
													"value": "<integer>",
													"description": "(Required) ID of the risk profile to retrieve tickers"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t},\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t}\n]"
								}
							]
						}
					]
				},
				{
					"name": "by_type",
					"item": [
						{
							"name": "Get a list of tickers by type",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticker/by_type?type=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticker",
										"by_type"
									],
									"query": [
										{
											"key": "type",
											"value": "<string>",
											"description": "(Required) Type of the tickers to retrieve"
										}
									]
								},
								"description": "Returns a list of tickers based on type."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ticker/by_type?type=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ticker",
												"by_type"
											],
											"query": [
												{
													"key": "type",
													"value": "<string>",
													"description": "(Required) Type of the tickers to retrieve"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t},\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t}\n]"
								}
							]
						}
					]
				},
				{
					"name": "by_symbol",
					"item": [
						{
							"name": "Find a ticker by symbol",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticker/by_symbol?symbol=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticker",
										"by_symbol"
									],
									"query": [
										{
											"key": "symbol",
											"value": "<string>",
											"description": "(Required) Symbol of the ticker to retrieve"
										}
									]
								},
								"description": "Returns ticker information based on symbol."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ticker/by_symbol?symbol=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ticker",
												"by_symbol"
											],
											"query": [
												{
													"key": "symbol",
													"value": "<string>",
													"description": "(Required) Symbol of the ticker to retrieve"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"symbol\": \"<string>\",\n\t\"name\": \"<string>\",\n\t\"type\": \"<string>\",\n\t\"risk_profile_id\": \"<integer>\",\n\t\"id\": \"<integer>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "historical-data",
					"item": [
						{
							"name": "{symbol}",
							"item": [
								{
									"name": "Get historical data for a ticker",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ticker/historical-data/:symbol",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ticker",
												"historical-data",
												":symbol"
											],
											"variable": [
												{
													"key": "symbol",
													"value": "<string>",
													"description": "(Required) Symbol of the ticker to retrieve historical data for"
												}
											]
										},
										"description": "Returns historical data for a ticker symbol."
									},
									"response": [
										{
											"name": "Successful response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ticker/historical-data/:symbol",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ticker",
														"historical-data",
														":symbol"
													],
													"variable": [
														{
															"key": "symbol"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n\t\"closeValues\": [\n\t\t\"<number>\",\n\t\t\"<number>\"\n\t]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "latest-data",
					"item": [
						{
							"name": "{symbol}",
							"item": [
								{
									"name": "Get latest data for a ticker",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ticker/latest-data/:symbol",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ticker",
												"latest-data",
												":symbol"
											],
											"variable": [
												{
													"key": "symbol",
													"value": "<string>",
													"description": "(Required) Symbol of the ticker to retrieve latest data for"
												}
											]
										},
										"description": "Returns latest data for a ticker symbol."
									},
									"response": [
										{
											"name": "Successful response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ticker/latest-data/:symbol",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ticker",
														"latest-data",
														":symbol"
													],
													"variable": [
														{
															"key": "symbol"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n\t\"Date\": \"<dateTime>\",\n\t\"Close\": \"<number>\",\n\t\"Volume\": \"<integer>\",\n\t\"PercentageChange\": \"<number>\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "watchlist",
			"item": [
				{
					"name": "by_user",
					"item": [
						{
							"name": "Get watchlist of a user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/watchlist/by_user?user_id=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"watchlist",
										"by_user"
									],
									"query": [
										{
											"key": "user_id",
											"value": "<integer>",
											"description": "(Required) ID of the user to retrieve watchlist"
										}
									]
								},
								"description": "Returns the watchlist (list of tickers) of a user."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/watchlist/by_user?user_id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"watchlist",
												"by_user"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>",
													"description": "(Required) ID of the user to retrieve watchlist"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t},\n\t{\n\t\t\"symbol\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"type\": \"<string>\",\n\t\t\"risk_profile_id\": \"<integer>\",\n\t\t\"id\": \"<integer>\"\n\t}\n]"
								}
							]
						}
					]
				},
				{
					"name": "add_to_user",
					"item": [
						{
							"name": "Add to watchlist of a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user_id\": \"<integer>\",\n\t\"ticker_id\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/watchlist/add_to_user",
								"description": "Adds to the watchlist of a user."
							},
							"response": [
								{
									"name": "Added to watchlist",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"user_id\": \"<integer>\",\n\t\"ticker_id\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/watchlist/add_to_user"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "Delete a watchlist entry",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"user_id\": \"<integer>\",\n\t\"ticker_id\": \"<integer>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/watchlist",
						"description": "Deletes a specific watchlist entry."
					},
					"response": [
						{
							"name": "Deleted from watchlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user_id\": \"<integer>\",\n\t\"ticker_id\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/watchlist"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://investsavvy-backend.onrender.com"
		},
		{
			"key": "password_hash",
			"value": "b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86"
		},
		{
			"key": "user_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "riskprofile_id",
			"value": "4"
		},
		{
			"key": "login_email",
			"value": "john.doe@email.com"
		},
		{
			"key": "login_password_hash",
			"value": "d0f2bc47da5415c62793f5c7e3a5df1e6c5261970d37c47ad0d23f03c2b084495dfdc0c235f3cadcd0780ab093b205690eeca0b96d2c439c3fcb4dc62ec37653"
		}
	]
}